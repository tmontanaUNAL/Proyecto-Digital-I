--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode366w[1..0]	: WIRE;
	w_anode375w[3..0]	: WIRE;
	w_anode392w[3..0]	: WIRE;
	w_anode402w[3..0]	: WIRE;
	w_anode412w[3..0]	: WIRE;
	w_anode422w[3..0]	: WIRE;
	w_anode432w[3..0]	: WIRE;
	w_anode442w[3..0]	: WIRE;
	w_anode452w[3..0]	: WIRE;
	w_anode464w[1..0]	: WIRE;
	w_anode471w[3..0]	: WIRE;
	w_anode482w[3..0]	: WIRE;
	w_anode492w[3..0]	: WIRE;
	w_anode502w[3..0]	: WIRE;
	w_anode512w[3..0]	: WIRE;
	w_anode522w[3..0]	: WIRE;
	w_anode532w[3..0]	: WIRE;
	w_anode542w[3..0]	: WIRE;
	w_data364w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode542w[3..3], w_anode532w[3..3], w_anode522w[3..3], w_anode512w[3..3], w_anode502w[3..3], w_anode492w[3..3], w_anode482w[3..3], w_anode471w[3..3]), ( w_anode452w[3..3], w_anode442w[3..3], w_anode432w[3..3], w_anode422w[3..3], w_anode412w[3..3], w_anode402w[3..3], w_anode392w[3..3], w_anode375w[3..3]));
	w_anode366w[] = ( (w_anode366w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode375w[] = ( (w_anode375w[2..2] & (! w_data364w[2..2])), (w_anode375w[1..1] & (! w_data364w[1..1])), (w_anode375w[0..0] & (! w_data364w[0..0])), w_anode366w[1..1]);
	w_anode392w[] = ( (w_anode392w[2..2] & (! w_data364w[2..2])), (w_anode392w[1..1] & (! w_data364w[1..1])), (w_anode392w[0..0] & w_data364w[0..0]), w_anode366w[1..1]);
	w_anode402w[] = ( (w_anode402w[2..2] & (! w_data364w[2..2])), (w_anode402w[1..1] & w_data364w[1..1]), (w_anode402w[0..0] & (! w_data364w[0..0])), w_anode366w[1..1]);
	w_anode412w[] = ( (w_anode412w[2..2] & (! w_data364w[2..2])), (w_anode412w[1..1] & w_data364w[1..1]), (w_anode412w[0..0] & w_data364w[0..0]), w_anode366w[1..1]);
	w_anode422w[] = ( (w_anode422w[2..2] & w_data364w[2..2]), (w_anode422w[1..1] & (! w_data364w[1..1])), (w_anode422w[0..0] & (! w_data364w[0..0])), w_anode366w[1..1]);
	w_anode432w[] = ( (w_anode432w[2..2] & w_data364w[2..2]), (w_anode432w[1..1] & (! w_data364w[1..1])), (w_anode432w[0..0] & w_data364w[0..0]), w_anode366w[1..1]);
	w_anode442w[] = ( (w_anode442w[2..2] & w_data364w[2..2]), (w_anode442w[1..1] & w_data364w[1..1]), (w_anode442w[0..0] & (! w_data364w[0..0])), w_anode366w[1..1]);
	w_anode452w[] = ( (w_anode452w[2..2] & w_data364w[2..2]), (w_anode452w[1..1] & w_data364w[1..1]), (w_anode452w[0..0] & w_data364w[0..0]), w_anode366w[1..1]);
	w_anode464w[] = ( (w_anode464w[0..0] & data_wire[3..3]), enable_wire);
	w_anode471w[] = ( (w_anode471w[2..2] & (! w_data364w[2..2])), (w_anode471w[1..1] & (! w_data364w[1..1])), (w_anode471w[0..0] & (! w_data364w[0..0])), w_anode464w[1..1]);
	w_anode482w[] = ( (w_anode482w[2..2] & (! w_data364w[2..2])), (w_anode482w[1..1] & (! w_data364w[1..1])), (w_anode482w[0..0] & w_data364w[0..0]), w_anode464w[1..1]);
	w_anode492w[] = ( (w_anode492w[2..2] & (! w_data364w[2..2])), (w_anode492w[1..1] & w_data364w[1..1]), (w_anode492w[0..0] & (! w_data364w[0..0])), w_anode464w[1..1]);
	w_anode502w[] = ( (w_anode502w[2..2] & (! w_data364w[2..2])), (w_anode502w[1..1] & w_data364w[1..1]), (w_anode502w[0..0] & w_data364w[0..0]), w_anode464w[1..1]);
	w_anode512w[] = ( (w_anode512w[2..2] & w_data364w[2..2]), (w_anode512w[1..1] & (! w_data364w[1..1])), (w_anode512w[0..0] & (! w_data364w[0..0])), w_anode464w[1..1]);
	w_anode522w[] = ( (w_anode522w[2..2] & w_data364w[2..2]), (w_anode522w[1..1] & (! w_data364w[1..1])), (w_anode522w[0..0] & w_data364w[0..0]), w_anode464w[1..1]);
	w_anode532w[] = ( (w_anode532w[2..2] & w_data364w[2..2]), (w_anode532w[1..1] & w_data364w[1..1]), (w_anode532w[0..0] & (! w_data364w[0..0])), w_anode464w[1..1]);
	w_anode542w[] = ( (w_anode542w[2..2] & w_data364w[2..2]), (w_anode542w[1..1] & w_data364w[1..1]), (w_anode542w[0..0] & w_data364w[0..0]), w_anode464w[1..1]);
	w_data364w[2..0] = data_wire[2..0];
END;
--VALID FILE
