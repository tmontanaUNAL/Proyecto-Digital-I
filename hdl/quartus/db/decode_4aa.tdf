--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 16 
SUBDESIGN decode_4aa
( 
	data[3..0]	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode557w[3..0]	: WIRE;
	w_anode574w[3..0]	: WIRE;
	w_anode584w[3..0]	: WIRE;
	w_anode594w[3..0]	: WIRE;
	w_anode604w[3..0]	: WIRE;
	w_anode614w[3..0]	: WIRE;
	w_anode624w[3..0]	: WIRE;
	w_anode634w[3..0]	: WIRE;
	w_anode644w[3..0]	: WIRE;
	w_anode655w[3..0]	: WIRE;
	w_anode665w[3..0]	: WIRE;
	w_anode675w[3..0]	: WIRE;
	w_anode685w[3..0]	: WIRE;
	w_anode695w[3..0]	: WIRE;
	w_anode705w[3..0]	: WIRE;
	w_anode715w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[7..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode634w[3..3], w_anode624w[3..3], w_anode614w[3..3], w_anode604w[3..3], w_anode594w[3..3], w_anode584w[3..3], w_anode574w[3..3], w_anode557w[3..3]);
	eq_wire2w[] = ( w_anode715w[3..3], w_anode705w[3..3], w_anode695w[3..3], w_anode685w[3..3], w_anode675w[3..3], w_anode665w[3..3], w_anode655w[3..3], w_anode644w[3..3]);
	w_anode557w[] = ( (w_anode557w[2..2] & (! data_wire[2..2])), (w_anode557w[1..1] & (! data_wire[1..1])), (w_anode557w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode574w[] = ( (w_anode574w[2..2] & (! data_wire[2..2])), (w_anode574w[1..1] & (! data_wire[1..1])), (w_anode574w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode584w[] = ( (w_anode584w[2..2] & (! data_wire[2..2])), (w_anode584w[1..1] & data_wire[1..1]), (w_anode584w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode594w[] = ( (w_anode594w[2..2] & (! data_wire[2..2])), (w_anode594w[1..1] & data_wire[1..1]), (w_anode594w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode604w[] = ( (w_anode604w[2..2] & data_wire[2..2]), (w_anode604w[1..1] & (! data_wire[1..1])), (w_anode604w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode614w[] = ( (w_anode614w[2..2] & data_wire[2..2]), (w_anode614w[1..1] & (! data_wire[1..1])), (w_anode614w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode624w[] = ( (w_anode624w[2..2] & data_wire[2..2]), (w_anode624w[1..1] & data_wire[1..1]), (w_anode624w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode634w[] = ( (w_anode634w[2..2] & data_wire[2..2]), (w_anode634w[1..1] & data_wire[1..1]), (w_anode634w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode644w[] = ( (w_anode644w[2..2] & (! data_wire[2..2])), (w_anode644w[1..1] & (! data_wire[1..1])), (w_anode644w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode655w[] = ( (w_anode655w[2..2] & (! data_wire[2..2])), (w_anode655w[1..1] & (! data_wire[1..1])), (w_anode655w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode665w[] = ( (w_anode665w[2..2] & (! data_wire[2..2])), (w_anode665w[1..1] & data_wire[1..1]), (w_anode665w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode675w[] = ( (w_anode675w[2..2] & (! data_wire[2..2])), (w_anode675w[1..1] & data_wire[1..1]), (w_anode675w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode685w[] = ( (w_anode685w[2..2] & data_wire[2..2]), (w_anode685w[1..1] & (! data_wire[1..1])), (w_anode685w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode695w[] = ( (w_anode695w[2..2] & data_wire[2..2]), (w_anode695w[1..1] & (! data_wire[1..1])), (w_anode695w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode705w[] = ( (w_anode705w[2..2] & data_wire[2..2]), (w_anode705w[1..1] & data_wire[1..1]), (w_anode705w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode715w[] = ( (w_anode715w[2..2] & data_wire[2..2]), (w_anode715w[1..1] & data_wire[1..1]), (w_anode715w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
